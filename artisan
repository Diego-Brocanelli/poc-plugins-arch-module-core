<?php

declare(strict_types=1);

use Illuminate\Foundation\Application as ConsoleApplication;
use Illuminate\Support\Arr;
use App\Console\Kernel as ConsoleKernel;
use App\Module\Core\Providers\ModuleConfig;

define('LARAVEL_START', microtime(true));

require __DIR__.'/vendor/autoload.php';

class Application extends ConsoleApplication
{
    private static $moduleConfig;
    
    private static $moduleConfigFirst;
    
    protected $appPath;

    protected $databasePath;

    protected $storagePath;

    protected $environmentPath;

    protected $environmentFile = '.env';

    /**
     * Muda o namespace utilizado pelo Laravel para criar arquivos.
     *
     * @param string $namespace
     */
    public function useModuleNamespace(string $namespace)
    {
        $this->namespace = $namespace;
    }
    
    /**
     * Obtem o valor de um parâmetro de configuração existente neste módulo.
     * A busca deve ser feira usando a notação pontuada do Laravel.
     * Ex.: module_core.minha_conf.legal
     */
    public static function config(string $param)
    {
        return (new ModuleConfig)->config($param);
    }
}


class Kernel extends ConsoleKernel
{
    protected function commands()
    {
        // Para adicionar comandos adicionais 
        // $this->commands = Tools\ServiceProvider::toolsCommands();
        return parent::commands();
    }
}

$laravelPath = \Application::config('laravel_install_path');

$app = new \Application(
    $_ENV['APP_BASE_PATH'] ?? __DIR__.'/vendor/laravel/laravel'
);

$app->useModuleNamespace("App\\Module\\" . \Application::config('module_namespace'));
$app->useAppPath(__DIR__ . '/app-module');
$app->useDatabasePath(__DIR__ . '/database');
$app->useStoragePath($laravelPath . '/storage');
$app->useEnvironmentPath($laravelPath);

$app->singleton(
    Illuminate\Contracts\Console\Kernel::class,
    \Kernel::class
);

$app->singleton(
    Illuminate\Contracts\Debug\ExceptionHandler::class,
    App\Exceptions\Handler::class
);

$kernel = $app->make(Illuminate\Contracts\Console\Kernel::class);

$status = $kernel->handle(
    $input = new Symfony\Component\Console\Input\ArgvInput,
    new Symfony\Component\Console\Output\ConsoleOutput
);

$kernel->terminate($input, $status);

exit($status);
